{
	"id": 0,
	"name": "@miuiu/postgrest",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 490,
			"name": "PostgrestBuilder",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isAbstract": true
			},
			"children": [
				{
					"id": 491,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 16,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 492,
							"name": "new PostgrestBuilder",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 493,
									"name": "Result",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 494,
									"name": "builder",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 490,
										"typeArguments": [
											{
												"type": "reference",
												"id": 493,
												"name": "Result"
											}
										],
										"name": "default"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 490,
								"typeArguments": [
									{
										"type": "reference",
										"id": 493,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 507,
					"name": "allowEmpty",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 14,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 499,
					"name": "body",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 10,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					}
				},
				{
					"id": 502,
					"name": "fetch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 13,
							"character": 11
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 503,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 504,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 505,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "RequestInfo",
														"package": "typescript",
														"name": "RequestInfo"
													},
													{
														"type": "reference",
														"qualifiedName": "URL",
														"package": "typescript",
														"name": "URL"
													}
												]
											}
										},
										{
											"id": 506,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "RequestInit",
												"package": "typescript",
												"name": "RequestInit"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"qualifiedName": "Response",
												"package": "typescript",
												"name": "Response"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						}
					},
					"defaultValue": "fetch"
				},
				{
					"id": 497,
					"name": "headers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 8,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"qualifiedName": "Record",
						"package": "typescript",
						"name": "Record"
					}
				},
				{
					"id": 495,
					"name": "method",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 6,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "GET"
							},
							{
								"type": "literal",
								"value": "HEAD"
							},
							{
								"type": "literal",
								"value": "POST"
							},
							{
								"type": "literal",
								"value": "PATCH"
							},
							{
								"type": "literal",
								"value": "DELETE"
							}
						]
					}
				},
				{
					"id": 498,
					"name": "schema",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 9,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 500,
					"name": "shouldThrowOnError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 11,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 501,
					"name": "signal",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 12,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "AbortSignal",
						"package": "typescript",
						"name": "AbortSignal"
					}
				},
				{
					"id": 496,
					"name": "url",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 7,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "URL",
						"package": "typescript",
						"name": "URL"
					}
				},
				{
					"id": 510,
					"name": "then",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 38,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 511,
							"name": "then",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 512,
									"name": "TResult1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "reference",
										"id": 538,
										"typeArguments": [
											{
												"type": "reference",
												"id": 493,
												"name": "Result"
											}
										],
										"name": "PostgrestSingleResponse"
									}
								},
								{
									"id": 513,
									"name": "TResult2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "never"
									}
								}
							],
							"parameters": [
								{
									"id": 514,
									"name": "onfulfilled",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 515,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 516,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 517,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 538,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 493,
																				"name": "Result"
																			}
																		],
																		"name": "PostgrestSingleResponse"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 378,
																		"name": "TResult1"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 378,
																				"name": "TResult1"
																			}
																		],
																		"qualifiedName": "PromiseLike",
																		"package": "typescript",
																		"name": "PromiseLike"
																	}
																]
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 518,
									"name": "onrejected",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 519,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 520,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 521,
																	"name": "reason",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 379,
																		"name": "TResult2"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 379,
																				"name": "TResult2"
																			}
																		],
																		"qualifiedName": "PromiseLike",
																		"package": "typescript",
																		"name": "PromiseLike"
																	}
																]
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 378,
												"name": "TResult1"
											},
											{
												"type": "reference",
												"id": 379,
												"name": "TResult2"
											}
										]
									}
								],
								"qualifiedName": "PromiseLike",
								"package": "typescript",
								"name": "PromiseLike"
							},
							"implementationOf": {
								"type": "reference",
								"name": "PromiseLike.then"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"name": "PromiseLike.then"
					}
				},
				{
					"id": 508,
					"name": "throwOnError",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 33,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 509,
							"name": "throwOnError",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If there's an error with the query, throwOnError will reject the promise by\nthrowing the error instead of returning it as part of a successful response.",
								"text": "{@link https://github.com/supabase/supabase-js/issues/92}\n"
							},
							"type": {
								"type": "reference",
								"id": 490,
								"typeArguments": [
									{
										"type": "reference",
										"id": 493,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						491
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						507,
						499,
						502,
						497,
						495,
						498,
						500,
						501,
						496
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						510,
						508
					]
				}
			],
			"sources": [
				{
					"fileName": "src/PostgrestBuilder.ts",
					"line": 3,
					"character": 30
				}
			],
			"typeParameter": [
				{
					"id": 522,
					"name": "Result",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 391,
					"name": "PostgrestTransformBuilder"
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 538,
							"typeArguments": [
								{
									"type": "reference",
									"id": 493,
									"name": "Result"
								}
							],
							"name": "PostgrestSingleResponse"
						}
					],
					"qualifiedName": "PromiseLike",
					"package": "typescript",
					"name": "PromiseLike"
				}
			]
		},
		{
			"id": 1,
			"name": "PostgrestClient",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "PostgREST client."
			},
			"children": [
				{
					"id": 2,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestClient.ts",
							"line": 37,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "new PostgrestClient",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a PostgREST client."
							},
							"typeParameter": [
								{
									"id": 4,
									"name": "Database",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 5,
									"name": "SchemaName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "conditional",
										"checkType": {
											"type": "literal",
											"value": "public"
										},
										"extendsType": {
											"type": "typeOperator",
											"operator": "keyof",
											"target": {
												"type": "reference",
												"id": 4,
												"name": "Database"
											}
										},
										"trueType": {
											"type": "literal",
											"value": "public"
										},
										"falseType": {
											"type": "intersection",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"id": 4,
														"name": "Database"
													}
												}
											]
										}
									}
								},
								{
									"id": 6,
									"name": "Schema",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GenericSchema"
									},
									"default": {
										"type": "conditional",
										"checkType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"id": 5,
												"name": "SchemaName"
											},
											"objectType": {
												"type": "reference",
												"id": 4,
												"name": "Database"
											}
										},
										"extendsType": {
											"type": "reference",
											"name": "GenericSchema"
										},
										"trueType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "intrinsic",
												"name": "any"
											},
											"objectType": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										"falseType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 7,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "URL of the PostgREST endpoint"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 8,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 9,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 10,
													"name": "headers",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Custom headers\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestClient.ts",
															"line": 42,
															"character": 3
														}
													],
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														],
														"qualifiedName": "Record",
														"package": "typescript",
														"name": "Record"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														10
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"typeArguments": [
									{
										"type": "reference",
										"id": 4,
										"name": "Database"
									},
									{
										"type": "reference",
										"id": 5,
										"name": "SchemaName"
									},
									{
										"type": "reference",
										"id": 6,
										"name": "Schema"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 12,
					"name": "headers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestClient.ts",
							"line": 27,
							"character": 1
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"qualifiedName": "Record",
						"package": "typescript",
						"name": "Record"
					}
				},
				{
					"id": 11,
					"name": "url",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestClient.ts",
							"line": 26,
							"character": 1
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 13,
					"name": "from",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestClient.ts",
							"line": 49,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 14,
							"name": "from",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform a query on a table or a view."
							},
							"typeParameter": [
								{
									"id": 15,
									"name": "TableName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 16,
									"name": "Table",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GenericTable"
									}
								}
							],
							"parameters": [
								{
									"id": 17,
									"name": "relation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The table or view name to query\n"
									},
									"type": {
										"type": "reference",
										"id": 15,
										"name": "TableName"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 37,
								"typeArguments": [
									{
										"type": "reference",
										"id": 6,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 16,
										"name": "Table"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 18,
							"name": "from",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform a query on a table or a view."
							},
							"typeParameter": [
								{
									"id": 19,
									"name": "ViewName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 20,
									"name": "View",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GenericView"
									}
								}
							],
							"parameters": [
								{
									"id": 21,
									"name": "relation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The table or view name to query\n"
									},
									"type": {
										"type": "reference",
										"id": 19,
										"name": "ViewName"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 37,
								"typeArguments": [
									{
										"type": "reference",
										"id": 6,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 20,
										"name": "View"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 22,
							"name": "from",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform a query on a table or a view."
							},
							"parameters": [
								{
									"id": 23,
									"name": "relation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The table or view name to query\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 37,
								"typeArguments": [
									{
										"type": "reference",
										"id": 6,
										"name": "Schema"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 24,
					"name": "rpc",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestClient.ts",
							"line": 97,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 25,
							"name": "rpc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform a function call."
							},
							"typeParameter": [
								{
									"id": 26,
									"name": "FunctionName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 27,
									"name": "Function_",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GenericFunction"
									}
								}
							],
							"parameters": [
								{
									"id": 28,
									"name": "fn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The function name to call"
									},
									"type": {
										"type": "reference",
										"id": 26,
										"name": "FunctionName"
									}
								},
								{
									"id": 29,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The arguments to pass to the function call"
									},
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "Args"
										},
										"objectType": {
											"type": "reference",
											"id": 27,
											"name": "Function_"
										}
									},
									"defaultValue": "{}"
								},
								{
									"id": 30,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 31,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 33,
													"name": "count",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Count algorithm to use to count rows returned by the\nfunction. Only applicable for [set-returning\nfunctions](https://www.postgresql.org/docs/current/functions-srf.html).\n\n`\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\nhood.\n\n`\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\nstatistics under the hood.\n\n`\"estimated\"`: Uses exact count for low numbers and planned count for high\nnumbers.\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestClient.ts",
															"line": 108,
															"character": 3
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "exact"
															},
															{
																"type": "literal",
																"value": "planned"
															},
															{
																"type": "literal",
																"value": "estimated"
															}
														]
													}
												},
												{
													"id": 32,
													"name": "head",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "When set to `true`, `data` will not be returned.\nUseful if you only need the count."
													},
													"sources": [
														{
															"fileName": "src/PostgrestClient.ts",
															"line": 107,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														33,
														32
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 6,
										"name": "Schema"
									},
									{
										"type": "conditional",
										"checkType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "literal",
												"value": "Returns"
											},
											"objectType": {
												"type": "reference",
												"id": 27,
												"name": "Function_"
											}
										},
										"extendsType": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										"trueType": {
											"type": "conditional",
											"checkType": {
												"type": "indexedAccess",
												"indexType": {
													"type": "intrinsic",
													"name": "number"
												},
												"objectType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "any"
													},
													"objectType": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											},
											"extendsType": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"qualifiedName": "Record",
												"package": "typescript",
												"name": "Record"
											},
											"trueType": {
												"type": "indexedAccess",
												"indexType": {
													"type": "intrinsic",
													"name": "any"
												},
												"objectType": {
													"type": "intrinsic",
													"name": "any"
												}
											},
											"falseType": {
												"type": "intrinsic",
												"name": "never"
											}
										},
										"falseType": {
											"type": "intrinsic",
											"name": "never"
										}
									},
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "Returns"
										},
										"objectType": {
											"type": "reference",
											"id": 27,
											"name": "Function_"
										}
									}
								],
								"name": "default"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						12,
						11
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						13,
						24
					]
				}
			],
			"sources": [
				{
					"fileName": "src/PostgrestClient.ts",
					"line": 17,
					"character": 21
				}
			],
			"typeParameter": [
				{
					"id": 34,
					"name": "Database",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"comment": {
						"shortText": "Types for the schema from the [type\ngenerator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n"
					},
					"default": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 35,
					"name": "SchemaName",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"comment": {
						"shortText": "Postgres schema to switch to. Must be a string\nliteral, the same one passed to the constructor. If the schema is not\n`\"public\"`, this must be supplied manually.\n"
					},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"id": 4,
									"name": "Database"
								}
							}
						]
					},
					"default": {
						"type": "conditional",
						"checkType": {
							"type": "literal",
							"value": "public"
						},
						"extendsType": {
							"type": "typeOperator",
							"operator": "keyof",
							"target": {
								"type": "reference",
								"id": 4,
								"name": "Database"
							}
						},
						"trueType": {
							"type": "literal",
							"value": "public"
						},
						"falseType": {
							"type": "intersection",
							"types": [
								{
									"type": "intrinsic",
									"name": "string"
								},
								{
									"type": "typeOperator",
									"operator": "keyof",
									"target": {
										"type": "reference",
										"id": 4,
										"name": "Database"
									}
								}
							]
						}
					}
				},
				{
					"id": 36,
					"name": "Schema",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "GenericSchema"
					},
					"default": {
						"type": "conditional",
						"checkType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "reference",
								"id": 5,
								"name": "SchemaName"
							},
							"objectType": {
								"type": "reference",
								"id": 4,
								"name": "Database"
							}
						},
						"extendsType": {
							"type": "reference",
							"name": "GenericSchema"
						},
						"trueType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "reference",
								"id": 5,
								"name": "SchemaName"
							},
							"objectType": {
								"type": "reference",
								"id": 4,
								"name": "Database"
							}
						},
						"falseType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				}
			]
		},
		{
			"id": 100,
			"name": "PostgrestFilterBuilder",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 101,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 102,
							"name": "new PostgrestFilterBuilder",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 103,
									"name": "Schema",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GenericSchema"
									}
								},
								{
									"id": 104,
									"name": "Row",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								},
								{
									"id": 105,
									"name": "Result",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 106,
									"name": "builder",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 490,
										"typeArguments": [
											{
												"type": "reference",
												"id": 105,
												"name": "Result"
											}
										],
										"name": "default"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 393,
								"name": "default.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "default.constructor"
					}
				},
				{
					"id": 373,
					"name": "allowEmpty",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 14,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 472,
						"name": "default.allowEmpty"
					}
				},
				{
					"id": 365,
					"name": "body",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 10,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 464,
						"name": "default.body"
					}
				},
				{
					"id": 368,
					"name": "fetch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 13,
							"character": 11
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 369,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 370,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 371,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "RequestInfo",
														"package": "typescript",
														"name": "RequestInfo"
													},
													{
														"type": "reference",
														"qualifiedName": "URL",
														"package": "typescript",
														"name": "URL"
													}
												]
											}
										},
										{
											"id": 372,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "RequestInit",
												"package": "typescript",
												"name": "RequestInit"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"qualifiedName": "Response",
												"package": "typescript",
												"name": "Response"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						}
					},
					"defaultValue": "fetch",
					"inheritedFrom": {
						"type": "reference",
						"id": 467,
						"name": "default.fetch"
					}
				},
				{
					"id": 363,
					"name": "headers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 8,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"qualifiedName": "Record",
						"package": "typescript",
						"name": "Record"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 462,
						"name": "default.headers"
					}
				},
				{
					"id": 361,
					"name": "method",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 6,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "GET"
							},
							{
								"type": "literal",
								"value": "HEAD"
							},
							{
								"type": "literal",
								"value": "POST"
							},
							{
								"type": "literal",
								"value": "PATCH"
							},
							{
								"type": "literal",
								"value": "DELETE"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 460,
						"name": "default.method"
					}
				},
				{
					"id": 364,
					"name": "schema",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 9,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 463,
						"name": "default.schema"
					}
				},
				{
					"id": 366,
					"name": "shouldThrowOnError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 11,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"id": 465,
						"name": "default.shouldThrowOnError"
					}
				},
				{
					"id": 367,
					"name": "signal",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 12,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "AbortSignal",
						"package": "typescript",
						"name": "AbortSignal"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 466,
						"name": "default.signal"
					}
				},
				{
					"id": 362,
					"name": "url",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 7,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "URL",
						"package": "typescript",
						"name": "URL"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 461,
						"name": "default.url"
					}
				},
				{
					"id": 333,
					"name": "abortSignal",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 155,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 334,
							"name": "abortSignal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the AbortSignal for the fetch request."
							},
							"parameters": [
								{
									"id": 335,
									"name": "signal",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The AbortSignal to use for the fetch request\n"
									},
									"type": {
										"type": "reference",
										"qualifiedName": "AbortSignal",
										"package": "typescript",
										"name": "AbortSignal"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 433,
								"name": "default.abortSignal"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 432,
						"name": "default.abortSignal"
					}
				},
				{
					"id": 195,
					"name": "containedBy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 243,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 196,
							"name": "containedBy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for jsonb, array, and range columns. Match only rows where\nevery element appearing in `column` is contained by `value`."
							},
							"typeParameter": [
								{
									"id": 197,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 198,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The jsonb, array, or range column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 197,
										"name": "ColumnName"
									}
								},
								{
									"id": 199,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The jsonb, array, or range value to filter with\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"qualifiedName": "Record",
												"package": "typescript",
												"name": "Record"
											},
											{
												"type": "array",
												"elementType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"id": 197,
														"name": "ColumnName"
													},
													"objectType": {
														"type": "reference",
														"id": 104,
														"name": "Row"
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 200,
							"name": "containedBy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for jsonb, array, and range columns. Match only rows where\nevery element appearing in `column` is contained by `value`."
							},
							"parameters": [
								{
									"id": 201,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The jsonb, array, or range column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 202,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The jsonb, array, or range value to filter with\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"qualifiedName": "Record",
												"package": "typescript",
												"name": "Record"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 187,
					"name": "contains",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 210,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 188,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for jsonb, array, and range columns. Match only rows where\n`column` contains every element appearing in `value`."
							},
							"typeParameter": [
								{
									"id": 189,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 190,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The jsonb, array, or range column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 189,
										"name": "ColumnName"
									}
								},
								{
									"id": 191,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The jsonb, array, or range value to filter with\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"qualifiedName": "Record",
												"package": "typescript",
												"name": "Record"
											},
											{
												"type": "array",
												"elementType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"id": 189,
														"name": "ColumnName"
													},
													"objectType": {
														"type": "reference",
														"id": 104,
														"name": "Row"
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 192,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for jsonb, array, and range columns. Match only rows where\n`column` contains every element appearing in `value`."
							},
							"parameters": [
								{
									"id": 193,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The jsonb, array, or range column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 194,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The jsonb, array, or range value to filter with\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"qualifiedName": "Record",
												"package": "typescript",
												"name": "Record"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 342,
					"name": "csv",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 190,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 343,
							"name": "csv",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return `data` as a string in CSV format."
							},
							"type": {
								"type": "reference",
								"id": 490,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 442,
								"name": "default.csv"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 441,
						"name": "default.csv"
					}
				},
				{
					"id": 107,
					"name": "eq",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 33,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 108,
							"name": "eq",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is equal to `value`.",
								"text": "To check if the value of `column` is NULL, you should use `.is()` instead.\n"
							},
							"typeParameter": [
								{
									"id": 109,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 110,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 109,
										"name": "ColumnName"
									}
								},
								{
									"id": 111,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"id": 109,
											"name": "ColumnName"
										},
										"objectType": {
											"type": "reference",
											"id": 104,
											"name": "Row"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 112,
							"name": "eq",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is equal to `value`.",
								"text": "To check if the value of `column` is NULL, you should use `.is()` instead.\n"
							},
							"parameters": [
								{
									"id": 113,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 114,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 346,
					"name": "explain",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 224,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 347,
							"name": "explain",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return `data` as the EXPLAIN plan for the query."
							},
							"parameters": [
								{
									"id": 348,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters\n"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 349,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 350,
													"name": "analyze",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, the query will be executed and the\nactual run time will be returned\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 232,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 353,
													"name": "buffers",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, include information on buffer usage\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 235,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 355,
													"name": "format",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "The format of the output, can be `\"text\"` (default)\nor `\"json\"`\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 237,
															"character": 2
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "text"
															},
															{
																"type": "literal",
																"value": "json"
															}
														]
													}
												},
												{
													"id": 352,
													"name": "settings",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, include information on configuration\nparameters that affect query planning\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 234,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 351,
													"name": "verbose",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, the query identifier will be returned\nand `data` will include the output columns of the query\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 233,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 354,
													"name": "wal",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, include information on WAL record generation\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 236,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														350,
														353,
														355,
														352,
														351,
														354
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 490,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									{
										"type": "reference",
										"id": 490,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "unknown"
														}
													],
													"qualifiedName": "Record",
													"package": "typescript",
													"name": "Record"
												}
											}
										],
										"name": "default"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 446,
								"name": "default.explain"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 445,
						"name": "default.explain"
					}
				},
				{
					"id": 289,
					"name": "filter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 491,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 290,
							"name": "filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows which satisfy the filter. This is an escape hatch - you\nshould use the specific filter methods wherever possible.",
								"text": "Unlike most filters, `opearator` and `value` are used as-is and need to\nfollow [PostgREST\nsyntax](https://postgrest.org/en/stable/api.html#operators). You also need\nto make sure they are properly sanitized.\n"
							},
							"typeParameter": [
								{
									"id": 291,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 292,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 291,
										"name": "ColumnName"
									}
								},
								{
									"id": 293,
									"name": "operator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The operator to filter with, following PostgREST syntax"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FilterOperator"
											},
											{
												"type": "literal",
												"value": "not.eq"
											},
											{
												"type": "literal",
												"value": "not.neq"
											},
											{
												"type": "literal",
												"value": "not.gt"
											},
											{
												"type": "literal",
												"value": "not.gte"
											},
											{
												"type": "literal",
												"value": "not.lt"
											},
											{
												"type": "literal",
												"value": "not.lte"
											},
											{
												"type": "literal",
												"value": "not.like"
											},
											{
												"type": "literal",
												"value": "not.ilike"
											},
											{
												"type": "literal",
												"value": "not.is"
											},
											{
												"type": "literal",
												"value": "not.in"
											},
											{
												"type": "literal",
												"value": "not.cs"
											},
											{
												"type": "literal",
												"value": "not.cd"
											},
											{
												"type": "literal",
												"value": "not.sl"
											},
											{
												"type": "literal",
												"value": "not.sr"
											},
											{
												"type": "literal",
												"value": "not.nxl"
											},
											{
												"type": "literal",
												"value": "not.nxr"
											},
											{
												"type": "literal",
												"value": "not.adj"
											},
											{
												"type": "literal",
												"value": "not.ov"
											},
											{
												"type": "literal",
												"value": "not.fts"
											},
											{
												"type": "literal",
												"value": "not.plfts"
											},
											{
												"type": "literal",
												"value": "not.phfts"
											},
											{
												"type": "literal",
												"value": "not.wfts"
											}
										]
									}
								},
								{
									"id": 294,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with, following PostgREST syntax\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 295,
							"name": "filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows which satisfy the filter. This is an escape hatch - you\nshould use the specific filter methods wherever possible.",
								"text": "Unlike most filters, `opearator` and `value` are used as-is and need to\nfollow [PostgREST\nsyntax](https://postgrest.org/en/stable/api.html#operators). You also need\nto make sure they are properly sanitized.\n"
							},
							"parameters": [
								{
									"id": 296,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 297,
									"name": "operator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The operator to filter with, following PostgREST syntax"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 298,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with, following PostgREST syntax\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 344,
					"name": "geojson",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 198,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 345,
							"name": "geojson",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return `data` as an object in [GeoJSON](https://geojson.org) format."
							},
							"type": {
								"type": "reference",
								"id": 490,
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 444,
								"name": "default.geojson"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 443,
						"name": "default.geojson"
					}
				},
				{
					"id": 123,
					"name": "gt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 67,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 124,
							"name": "gt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is greater than `value`."
							},
							"typeParameter": [
								{
									"id": 125,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 126,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 125,
										"name": "ColumnName"
									}
								},
								{
									"id": 127,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"id": 125,
											"name": "ColumnName"
										},
										"objectType": {
											"type": "reference",
											"id": 104,
											"name": "Row"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 128,
							"name": "gt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is greater than `value`."
							},
							"parameters": [
								{
									"id": 129,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 130,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 131,
					"name": "gte",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 83,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 132,
							"name": "gte",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is greater than or equal to `value`."
							},
							"typeParameter": [
								{
									"id": 133,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 134,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 133,
										"name": "ColumnName"
									}
								},
								{
									"id": 135,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"id": 133,
											"name": "ColumnName"
										},
										"objectType": {
											"type": "reference",
											"id": 104,
											"name": "Row"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 136,
							"name": "gte",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is greater than or equal to `value`."
							},
							"parameters": [
								{
									"id": 137,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 138,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 163,
					"name": "ilike",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 147,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 164,
							"name": "ilike",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` matches `pattern` case-insensitively."
							},
							"typeParameter": [
								{
									"id": 165,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 166,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 165,
										"name": "ColumnName"
									}
								},
								{
									"id": 167,
									"name": "pattern",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The pattern to match with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 168,
							"name": "ilike",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` matches `pattern` case-insensitively."
							},
							"parameters": [
								{
									"id": 169,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 170,
									"name": "pattern",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The pattern to match with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 179,
					"name": "in",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 185,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 180,
							"name": "in",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is included in the `values` array."
							},
							"typeParameter": [
								{
									"id": 181,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 182,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 181,
										"name": "ColumnName"
									}
								},
								{
									"id": 183,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The values array to filter with\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "reference",
												"id": 181,
												"name": "ColumnName"
											},
											"objectType": {
												"type": "reference",
												"id": 104,
												"name": "Row"
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 184,
							"name": "in",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is included in the `values` array."
							},
							"parameters": [
								{
									"id": 185,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 186,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The values array to filter with\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "unknown"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 171,
					"name": "is",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 163,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 172,
							"name": "is",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` IS `value`.",
								"text": "For non-boolean columns, this is only relevant for checking if the value of\n`column` is NULL by setting `value` to `null`.\n\nFor boolean columns, you can also set `value` to `true` or `false` and it\nwill behave the same way as `.eq()`.\n"
							},
							"typeParameter": [
								{
									"id": 173,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 174,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 173,
										"name": "ColumnName"
									}
								},
								{
									"id": 175,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "indexedAccess",
														"indexType": {
															"type": "reference",
															"id": 173,
															"name": "ColumnName"
														},
														"objectType": {
															"type": "reference",
															"id": 104,
															"name": "Row"
														}
													},
													{
														"type": "literal",
														"value": null
													}
												]
											},
											{
												"type": "intersection",
												"types": [
													{
														"type": "indexedAccess",
														"indexType": {
															"type": "reference",
															"id": 173,
															"name": "ColumnName"
														},
														"objectType": {
															"type": "reference",
															"id": 104,
															"name": "Row"
														}
													},
													{
														"type": "literal",
														"value": false
													}
												]
											},
											{
												"type": "intersection",
												"types": [
													{
														"type": "indexedAccess",
														"indexType": {
															"type": "reference",
															"id": 173,
															"name": "ColumnName"
														},
														"objectType": {
															"type": "reference",
															"id": 104,
															"name": "Row"
														}
													},
													{
														"type": "literal",
														"value": true
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 176,
							"name": "is",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` IS `value`.",
								"text": "For non-boolean columns, this is only relevant for checking if the value of\n`column` is NULL by setting `value` to `null`.\n\nFor boolean columns, you can also set `value` to `true` or `false` and it\nwill behave the same way as `.eq()`.\n"
							},
							"parameters": [
								{
									"id": 177,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 178,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 155,
					"name": "like",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 131,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 156,
							"name": "like",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` matches `pattern` case-sensitively."
							},
							"typeParameter": [
								{
									"id": 157,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 158,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 157,
										"name": "ColumnName"
									}
								},
								{
									"id": 159,
									"name": "pattern",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The pattern to match with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 160,
							"name": "like",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` matches `pattern` case-sensitively."
							},
							"parameters": [
								{
									"id": 161,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 162,
									"name": "pattern",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The pattern to match with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 320,
					"name": "limit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 119,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 321,
							"name": "limit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Limit the query result by `count`."
							},
							"parameters": [
								{
									"id": 322,
									"name": "count",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The maximum number of rows to return"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 323,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 324,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 325,
													"name": "foreignTable",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Set this to limit rows of foreign tables\ninstead of the current table\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 119,
															"character": 42
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														325
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 420,
								"name": "default.limit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 419,
						"name": "default.limit"
					}
				},
				{
					"id": 139,
					"name": "lt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 99,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 140,
							"name": "lt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is less than `value`."
							},
							"typeParameter": [
								{
									"id": 141,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 142,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 141,
										"name": "ColumnName"
									}
								},
								{
									"id": 143,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"id": 141,
											"name": "ColumnName"
										},
										"objectType": {
											"type": "reference",
											"id": 104,
											"name": "Row"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 144,
							"name": "lt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is less than `value`."
							},
							"parameters": [
								{
									"id": 145,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 146,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 147,
					"name": "lte",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 115,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 148,
							"name": "lte",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is less than or equal to `value`."
							},
							"typeParameter": [
								{
									"id": 149,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 150,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 149,
										"name": "ColumnName"
									}
								},
								{
									"id": 151,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"id": 149,
											"name": "ColumnName"
										},
										"objectType": {
											"type": "reference",
											"id": 104,
											"name": "Row"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 152,
							"name": "lte",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is less than or equal to `value`."
							},
							"parameters": [
								{
									"id": 153,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 154,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 267,
					"name": "match",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 430,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 268,
							"name": "match",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where each column in `query` keys is equal to its\nassociated value. Shorthand for multiple `.eq()`s."
							},
							"typeParameter": [
								{
									"id": 269,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 270,
									"name": "query",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The object to filter with, with column names as keys mapped\nto their filter values\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 269,
												"name": "ColumnName"
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"id": 269,
													"name": "ColumnName"
												},
												"objectType": {
													"type": "reference",
													"id": 104,
													"name": "Row"
												}
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 271,
							"name": "match",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where each column in `query` keys is equal to its\nassociated value. Shorthand for multiple `.eq()`s."
							},
							"parameters": [
								{
									"id": 272,
									"name": "query",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The object to filter with, with column names as keys mapped\nto their filter values\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 339,
					"name": "maybeSingle",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 179,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 340,
							"name": "maybeSingle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return `data` as a single object instead of an array of objects.",
								"text": "Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\nthis returns an error.\n"
							},
							"typeParameter": [
								{
									"id": 341,
									"name": "ResultOne",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 105,
											"name": "Result"
										},
										"extendsType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"name": "ResultOne"
											}
										},
										"trueType": {
											"type": "reference",
											"name": "ResultOne"
										},
										"falseType": {
											"type": "intrinsic",
											"name": "never"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 490,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"id": 341,
												"name": "ResultOne"
											}
										]
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 439,
								"name": "default.maybeSingle"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 438,
						"name": "default.maybeSingle"
					}
				},
				{
					"id": 115,
					"name": "neq",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 51,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 116,
							"name": "neq",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is not equal to `value`."
							},
							"typeParameter": [
								{
									"id": 117,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 118,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 117,
										"name": "ColumnName"
									}
								},
								{
									"id": 119,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"id": 117,
											"name": "ColumnName"
										},
										"objectType": {
											"type": "reference",
											"id": 104,
											"name": "Row"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 120,
							"name": "neq",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows where `column` is not equal to `value`."
							},
							"parameters": [
								{
									"id": 121,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 122,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 273,
					"name": "not",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 448,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 274,
							"name": "not",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows which doesn't satisfy the filter.",
								"text": "Unlike most filters, `opearator` and `value` are used as-is and need to\nfollow [PostgREST\nsyntax](https://postgrest.org/en/stable/api.html#operators). You also need\nto make sure they are properly sanitized.\n"
							},
							"typeParameter": [
								{
									"id": 275,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 276,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 275,
										"name": "ColumnName"
									}
								},
								{
									"id": 277,
									"name": "operator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The operator to be negated to filter with, following\nPostgREST syntax"
									},
									"type": {
										"type": "reference",
										"name": "FilterOperator"
									}
								},
								{
									"id": 278,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with, following PostgREST syntax\n"
									},
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"id": 275,
											"name": "ColumnName"
										},
										"objectType": {
											"type": "reference",
											"id": 104,
											"name": "Row"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 279,
							"name": "not",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows which doesn't satisfy the filter.",
								"text": "Unlike most filters, `opearator` and `value` are used as-is and need to\nfollow [PostgREST\nsyntax](https://postgrest.org/en/stable/api.html#operators). You also need\nto make sure they are properly sanitized.\n"
							},
							"parameters": [
								{
									"id": 280,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 281,
									"name": "operator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The operator to be negated to filter with, following\nPostgREST syntax"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 282,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The value to filter with, following PostgREST syntax\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 283,
					"name": "or",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 485,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 284,
							"name": "or",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Match only rows which satisfy at least one of the filters.",
								"text": "Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\nsyntax](https://postgrest.org/en/stable/api.html#operators). You also need\nto make sure it's properly sanitized.\n\nIt's currently not possible to do an `.or()` filter across multiple tables.\n"
							},
							"parameters": [
								{
									"id": 285,
									"name": "filters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The filters to use, following PostgREST syntax"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 286,
									"name": "foreignTable",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Set this to filter on foreign tables instead of the\ncurrent table\n"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 287,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 288,
													"name": "foreignTable",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/PostgrestFilterBuilder.ts",
															"line": 485,
															"character": 41
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														288
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 304,
					"name": "order",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 49,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 305,
							"name": "order",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Order the query result by `column`.",
								"text": "You can call this method multiple times to order by multiple columns.\n\nYou can order foreign tables, but it doesn't affect the ordering of the\ncurrent table.\n"
							},
							"typeParameter": [
								{
									"id": 306,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 307,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to order by"
									},
									"type": {
										"type": "reference",
										"id": 306,
										"name": "ColumnName"
									}
								},
								{
									"id": 308,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Named parameters"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 309,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 310,
													"name": "ascending",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, the result will be in ascending order"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 52,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 312,
													"name": "foreignTable",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Set this to order a foreign table by foreign\ncolumns\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 54,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "undefined"
													}
												},
												{
													"id": 311,
													"name": "nullsFirst",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, `null`s appear first. If `false`,\n`null`s appear last."
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 53,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														310,
														312,
														311
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 404,
								"name": "default.order"
							}
						},
						{
							"id": 313,
							"name": "order",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Order the query result by `column`.",
								"text": "You can call this method multiple times to order by multiple columns.\n\nYou can order foreign tables, but it doesn't affect the ordering of the\ncurrent table.\n"
							},
							"parameters": [
								{
									"id": 314,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to order by"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 315,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Named parameters"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 316,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 317,
													"name": "ascending",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, the result will be in ascending order"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 60,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 319,
													"name": "foreignTable",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Set this to order a foreign table by foreign\ncolumns\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 62,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 318,
													"name": "nullsFirst",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, `null`s appear first. If `false`,\n`null`s appear last."
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 61,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														317,
														319,
														318
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 412,
								"name": "default.order"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 403,
						"name": "default.order"
					}
				},
				{
					"id": 243,
					"name": "overlaps",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 363,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 244,
							"name": "overlaps",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for array and range columns. Match only rows where\n`column` and `value` have an element in common."
							},
							"typeParameter": [
								{
									"id": 245,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 246,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The array or range column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 245,
										"name": "ColumnName"
									}
								},
								{
									"id": 247,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The array or range value to filter with\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"id": 245,
														"name": "ColumnName"
													},
													"objectType": {
														"type": "reference",
														"id": 104,
														"name": "Row"
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 248,
							"name": "overlaps",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for array and range columns. Match only rows where\n`column` and `value` have an element in common."
							},
							"parameters": [
								{
									"id": 249,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The array or range column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 250,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The array or range value to filter with\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 326,
					"name": "range",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 135,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 327,
							"name": "range",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Limit the query result by `from` and `to` inclusively."
							},
							"parameters": [
								{
									"id": 328,
									"name": "from",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The starting index from which to limit the result"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 329,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The last index to which to limit the result"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 330,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 331,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 332,
													"name": "foreignTable",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Set this to limit rows of foreign tables\ninstead of the current table\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 138,
															"character": 22
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														332
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 426,
								"name": "default.range"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 425,
						"name": "default.range"
					}
				},
				{
					"id": 235,
					"name": "rangeAdjacent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 345,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 236,
							"name": "rangeAdjacent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for range columns. Match only rows where `column` is\nmutually exclusive to `range` and there can be no element between the two\nranges."
							},
							"typeParameter": [
								{
									"id": 237,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 238,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 237,
										"name": "ColumnName"
									}
								},
								{
									"id": 239,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 240,
							"name": "rangeAdjacent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for range columns. Match only rows where `column` is\nmutually exclusive to `range` and there can be no element between the two\nranges."
							},
							"parameters": [
								{
									"id": 241,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 242,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 203,
					"name": "rangeGt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 275,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 204,
							"name": "rangeGt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for range columns. Match only rows where every element in\n`column` is greater than any element in `range`."
							},
							"typeParameter": [
								{
									"id": 205,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 206,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 205,
										"name": "ColumnName"
									}
								},
								{
									"id": 207,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 208,
							"name": "rangeGt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for range columns. Match only rows where every element in\n`column` is greater than any element in `range`."
							},
							"parameters": [
								{
									"id": 209,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 210,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 211,
					"name": "rangeGte",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 292,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 212,
							"name": "rangeGte",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for range columns. Match only rows where every element in\n`column` is either contained in `range` or greater than any element in\n`range`."
							},
							"typeParameter": [
								{
									"id": 213,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 214,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 213,
										"name": "ColumnName"
									}
								},
								{
									"id": 215,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 216,
							"name": "rangeGte",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for range columns. Match only rows where every element in\n`column` is either contained in `range` or greater than any element in\n`range`."
							},
							"parameters": [
								{
									"id": 217,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 218,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 219,
					"name": "rangeLt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 310,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 220,
							"name": "rangeLt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for range columns. Match only rows where every element in\n`column` is less than any element in `range`."
							},
							"typeParameter": [
								{
									"id": 221,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 222,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 221,
										"name": "ColumnName"
									}
								},
								{
									"id": 223,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 224,
							"name": "rangeLt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for range columns. Match only rows where every element in\n`column` is less than any element in `range`."
							},
							"parameters": [
								{
									"id": 225,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 226,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 227,
					"name": "rangeLte",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 327,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 228,
							"name": "rangeLte",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for range columns. Match only rows where every element in\n`column` is either contained in `range` or less than any element in\n`range`."
							},
							"typeParameter": [
								{
									"id": 229,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 230,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 229,
										"name": "ColumnName"
									}
								},
								{
									"id": 231,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 232,
							"name": "rangeLte",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for range columns. Match only rows where every element in\n`column` is either contained in `range` or less than any element in\n`range`."
							},
							"parameters": [
								{
									"id": 233,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 234,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range to filter with\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 358,
					"name": "returns",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 279,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 359,
							"name": "returns",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Override the type of the returned `data`."
							},
							"typeParameter": [
								{
									"id": 360,
									"name": "NewResult",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The new result type to override with\n"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 391,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 360,
										"name": "NewResult"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 458,
								"name": "default.returns"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 457,
						"name": "default.returns"
					}
				},
				{
					"id": 356,
					"name": "rollback",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 265,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 357,
							"name": "rollback",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rollback the query.",
								"text": "`data` will still be returned, but the query is not committed.\n"
							},
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 456,
								"name": "default.rollback"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 455,
						"name": "default.rollback"
					}
				},
				{
					"id": 299,
					"name": "select",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 19,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 300,
							"name": "select",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform a SELECT on the query result.",
								"text": "By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\nreturn modified rows. By calling this method, modified rows are returned in\n`data`.\n"
							},
							"typeParameter": [
								{
									"id": 301,
									"name": "Query",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "literal",
										"value": "*"
									}
								},
								{
									"id": 302,
									"name": "NewResultOne",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 103,
												"name": "Schema"
											},
											{
												"type": "reference",
												"id": 104,
												"name": "Row"
											},
											{
												"type": "reference",
												"id": 301,
												"name": "Query"
											}
										],
										"name": "GetResult"
									}
								}
							],
							"parameters": [
								{
									"id": 303,
									"name": "columns",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The columns to retrieve, separated by commas\n"
									},
									"type": {
										"type": "reference",
										"id": 301,
										"name": "Query"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 391,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 302,
											"name": "NewResultOne"
										}
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 399,
								"name": "default.select"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 398,
						"name": "default.select"
					}
				},
				{
					"id": 336,
					"name": "single",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 166,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 337,
							"name": "single",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return `data` as a single object instead of an array of objects.",
								"text": "Query result must be one row (e.g. using `.limit(1)`), otherwise this\nreturns an error.\n"
							},
							"typeParameter": [
								{
									"id": 338,
									"name": "ResultOne",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 105,
											"name": "Result"
										},
										"extendsType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"name": "ResultOne"
											}
										},
										"trueType": {
											"type": "reference",
											"name": "ResultOne"
										},
										"falseType": {
											"type": "intrinsic",
											"name": "never"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 490,
								"typeArguments": [
									{
										"type": "reference",
										"id": 338,
										"name": "ResultOne"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 436,
								"name": "default.single"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 435,
						"name": "default.single"
					}
				},
				{
					"id": 251,
					"name": "textSearch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestFilterBuilder.ts",
							"line": 386,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 252,
							"name": "textSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for text and tsvector columns. Match only rows where\n`column` matches the query string in `query`."
							},
							"typeParameter": [
								{
									"id": 253,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 254,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The text or tsvector column to filter on"
									},
									"type": {
										"type": "reference",
										"id": 253,
										"name": "ColumnName"
									}
								},
								{
									"id": 255,
									"name": "query",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The query text to match with"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 256,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Named parameters"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 257,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 258,
													"name": "config",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "The text search configuration to use"
													},
													"sources": [
														{
															"fileName": "src/PostgrestFilterBuilder.ts",
															"line": 389,
															"character": 14
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 259,
													"name": "type",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Change how the `query` text is interpreted\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestFilterBuilder.ts",
															"line": 389,
															"character": 31
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "plain"
															},
															{
																"type": "literal",
																"value": "phrase"
															},
															{
																"type": "literal",
																"value": "websearch"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														258,
														259
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 260,
							"name": "textSearch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only relevant for text and tsvector columns. Match only rows where\n`column` matches the query string in `query`."
							},
							"parameters": [
								{
									"id": 261,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The text or tsvector column to filter on"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 262,
									"name": "query",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The query text to match with"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 263,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Named parameters"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 264,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 265,
													"name": "config",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "The text search configuration to use"
													},
													"sources": [
														{
															"fileName": "src/PostgrestFilterBuilder.ts",
															"line": 394,
															"character": 14
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 266,
													"name": "type",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Change how the `query` text is interpreted\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestFilterBuilder.ts",
															"line": 394,
															"character": 31
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "plain"
															},
															{
																"type": "literal",
																"value": "phrase"
															},
															{
																"type": "literal",
																"value": "websearch"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														265,
														266
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 376,
					"name": "then",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 38,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 377,
							"name": "then",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 378,
									"name": "TResult1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "reference",
										"id": 538,
										"typeArguments": [
											{
												"type": "reference",
												"id": 105,
												"name": "Result"
											}
										],
										"name": "PostgrestSingleResponse"
									}
								},
								{
									"id": 379,
									"name": "TResult2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "never"
									}
								}
							],
							"parameters": [
								{
									"id": 380,
									"name": "onfulfilled",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 381,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 382,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 383,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 538,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 105,
																				"name": "Result"
																			}
																		],
																		"name": "PostgrestSingleResponse"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 378,
																		"name": "TResult1"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 378,
																				"name": "TResult1"
																			}
																		],
																		"qualifiedName": "PromiseLike",
																		"package": "typescript",
																		"name": "PromiseLike"
																	}
																]
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 384,
									"name": "onrejected",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 385,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 386,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 387,
																	"name": "reason",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 379,
																		"name": "TResult2"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 379,
																				"name": "TResult2"
																			}
																		],
																		"qualifiedName": "PromiseLike",
																		"package": "typescript",
																		"name": "PromiseLike"
																	}
																]
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 378,
												"name": "TResult1"
											},
											{
												"type": "reference",
												"id": 379,
												"name": "TResult2"
											}
										]
									}
								],
								"qualifiedName": "PromiseLike",
								"package": "typescript",
								"name": "PromiseLike"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 476,
								"name": "default.then"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 475,
						"name": "default.then"
					}
				},
				{
					"id": 374,
					"name": "throwOnError",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 33,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 375,
							"name": "throwOnError",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If there's an error with the query, throwOnError will reject the promise by\nthrowing the error instead of returning it as part of a successful response.",
								"text": "{@link https://github.com/supabase/supabase-js/issues/92}\n"
							},
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 103,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 104,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 105,
										"name": "Result"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 474,
								"name": "default.throwOnError"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 473,
						"name": "default.throwOnError"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						101
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						373,
						365,
						368,
						363,
						361,
						364,
						366,
						367,
						362
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						333,
						195,
						187,
						342,
						107,
						346,
						289,
						344,
						123,
						131,
						163,
						179,
						171,
						155,
						320,
						139,
						147,
						267,
						339,
						115,
						273,
						283,
						304,
						243,
						326,
						235,
						203,
						211,
						219,
						227,
						358,
						356,
						299,
						336,
						251,
						376,
						374
					]
				}
			],
			"sources": [
				{
					"fileName": "src/PostgrestFilterBuilder.ts",
					"line": 28,
					"character": 21
				}
			],
			"typeParameter": [
				{
					"id": 388,
					"name": "Schema",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "GenericSchema"
					}
				},
				{
					"id": 389,
					"name": "Row",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"qualifiedName": "Record",
						"package": "typescript",
						"name": "Record"
					}
				},
				{
					"id": 390,
					"name": "Result",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 391,
					"typeArguments": [
						{
							"type": "reference",
							"id": 103,
							"name": "Schema"
						},
						{
							"type": "reference",
							"id": 104,
							"name": "Row"
						},
						{
							"type": "reference",
							"id": 105,
							"name": "Result"
						}
					],
					"name": "default"
				}
			]
		},
		{
			"id": 37,
			"name": "PostgrestQueryBuilder",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 38,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestQueryBuilder.ts",
							"line": 16,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 39,
							"name": "new PostgrestQueryBuilder",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 40,
									"name": "Schema",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GenericSchema"
									}
								},
								{
									"id": 41,
									"name": "Relation",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "GenericTable"
											},
											{
												"type": "reference",
												"name": "GenericView"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 42,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "URL",
										"package": "typescript",
										"name": "URL"
									}
								},
								{
									"id": 43,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 44,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 47,
													"name": "fetch",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/PostgrestQueryBuilder.ts",
															"line": 25,
															"character": 3
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 48,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 49,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 50,
																			"name": "input",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "union",
																				"types": [
																					{
																						"type": "reference",
																						"qualifiedName": "RequestInfo",
																						"package": "typescript",
																						"name": "RequestInfo"
																					},
																					{
																						"type": "reference",
																						"qualifiedName": "URL",
																						"package": "typescript",
																						"name": "URL"
																					}
																				]
																			}
																		},
																		{
																			"id": 51,
																			"name": "init",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isOptional": true
																			},
																			"type": {
																				"type": "reference",
																				"qualifiedName": "RequestInit",
																				"package": "typescript",
																				"name": "RequestInit"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"qualifiedName": "Response",
																				"package": "typescript",
																				"name": "Response"
																			}
																		],
																		"qualifiedName": "Promise",
																		"package": "typescript",
																		"name": "Promise"
																	}
																}
															]
														}
													}
												},
												{
													"id": 45,
													"name": "headers",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/PostgrestQueryBuilder.ts",
															"line": 23,
															"character": 3
														}
													],
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														],
														"qualifiedName": "Record",
														"package": "typescript",
														"name": "Record"
													}
												},
												{
													"id": 46,
													"name": "schema",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/PostgrestQueryBuilder.ts",
															"line": 24,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														47,
														45,
														46
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 37,
								"typeArguments": [
									{
										"type": "reference",
										"id": 40,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 41,
										"name": "Relation"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 56,
					"name": "fetch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestQueryBuilder.ts",
							"line": 14,
							"character": 1
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 57,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 58,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 59,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "RequestInfo",
														"package": "typescript",
														"name": "RequestInfo"
													},
													{
														"type": "reference",
														"qualifiedName": "URL",
														"package": "typescript",
														"name": "URL"
													}
												]
											}
										},
										{
											"id": 60,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "RequestInit",
												"package": "typescript",
												"name": "RequestInit"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"qualifiedName": "Response",
												"package": "typescript",
												"name": "Response"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						}
					}
				},
				{
					"id": 53,
					"name": "headers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestQueryBuilder.ts",
							"line": 11,
							"character": 1
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"qualifiedName": "Record",
						"package": "typescript",
						"name": "Record"
					}
				},
				{
					"id": 54,
					"name": "schema",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestQueryBuilder.ts",
							"line": 12,
							"character": 1
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 55,
					"name": "signal",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestQueryBuilder.ts",
							"line": 13,
							"character": 1
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "AbortSignal",
						"package": "typescript",
						"name": "AbortSignal"
					}
				},
				{
					"id": 52,
					"name": "url",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestQueryBuilder.ts",
							"line": 10,
							"character": 1
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "URL",
						"package": "typescript",
						"name": "URL"
					}
				},
				{
					"id": 93,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestQueryBuilder.ts",
							"line": 319,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 94,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform a DELETE on the table or view.",
								"text": "By default, deleted rows are not returned. To return it, chain the call\nwith `.select()` after filters.\n"
							},
							"parameters": [
								{
									"id": 95,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters\n"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 96,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 97,
													"name": "count",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Count algorithm to use to count deleted rows.\n\n`\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\nhood.\n\n`\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\nstatistics under the hood.\n\n`\"estimated\"`: Uses exact count for low numbers and planned count for high\nnumbers.\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestQueryBuilder.ts",
															"line": 322,
															"character": 2
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "exact"
															},
															{
																"type": "literal",
																"value": "planned"
															},
															{
																"type": "literal",
																"value": "estimated"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														97
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 40,
										"name": "Schema"
									},
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "Row"
										},
										"objectType": {
											"type": "reference",
											"id": 41,
											"name": "Relation"
										}
									},
									{
										"type": "literal",
										"value": null
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 70,
					"name": "insert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestQueryBuilder.ts",
							"line": 120,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 71,
							"name": "insert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform an INSERT into the table or view.",
								"text": "By default, inserted rows are not returned. To return it, chain the call\nwith `.select()`.\n"
							},
							"typeParameter": [
								{
									"id": 72,
									"name": "Row",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								}
							],
							"parameters": [
								{
									"id": 73,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The values to insert. Pass an object to insert a single row\nor an array to insert multiple rows.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 72,
												"name": "Row"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 72,
													"name": "Row"
												}
											}
										]
									}
								},
								{
									"id": 74,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters\n"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 75,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 76,
													"name": "count",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Count algorithm to use to count inserted rows.\n\n`\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\nhood.\n\n`\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\nstatistics under the hood.\n\n`\"estimated\"`: Uses exact count for low numbers and planned count for high\nnumbers.\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestQueryBuilder.ts",
															"line": 129,
															"character": 3
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "exact"
															},
															{
																"type": "literal",
																"value": "planned"
															},
															{
																"type": "literal",
																"value": "estimated"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														76
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 40,
										"name": "Schema"
									},
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "Row"
										},
										"objectType": {
											"type": "reference",
											"id": 41,
											"name": "Relation"
										}
									},
									{
										"type": "literal",
										"value": null
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 61,
					"name": "select",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestQueryBuilder.ts",
							"line": 55,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 62,
							"name": "select",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform a SELECT query on the table or view."
							},
							"typeParameter": [
								{
									"id": 63,
									"name": "Query",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "literal",
										"value": "*"
									}
								},
								{
									"id": 64,
									"name": "ResultOne",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 40,
												"name": "Schema"
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "literal",
													"value": "Row"
												},
												"objectType": {
													"type": "reference",
													"id": 41,
													"name": "Relation"
												}
											},
											{
												"type": "reference",
												"id": 63,
												"name": "Query"
											}
										],
										"name": "GetResult"
									}
								}
							],
							"parameters": [
								{
									"id": 65,
									"name": "columns",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n"
									},
									"type": {
										"type": "reference",
										"id": 63,
										"name": "Query"
									}
								},
								{
									"id": 66,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters\n"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 67,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 69,
													"name": "count",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Count algorithm to use to count rows in the table or view.\n\n`\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\nhood.\n\n`\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\nstatistics under the hood.\n\n`\"estimated\"`: Uses exact count for low numbers and planned count for high\nnumbers.\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestQueryBuilder.ts",
															"line": 65,
															"character": 3
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "exact"
															},
															{
																"type": "literal",
																"value": "planned"
															},
															{
																"type": "literal",
																"value": "estimated"
															}
														]
													}
												},
												{
													"id": 68,
													"name": "head",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "When set to `true`, `data` will not be returned.\nUseful if you only need the count.\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestQueryBuilder.ts",
															"line": 64,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														69,
														68
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 40,
										"name": "Schema"
									},
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "Row"
										},
										"objectType": {
											"type": "reference",
											"id": 41,
											"name": "Relation"
										}
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 64,
											"name": "ResultOne"
										}
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 86,
					"name": "update",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestQueryBuilder.ts",
							"line": 266,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 87,
							"name": "update",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform an UPDATE on the table or view.",
								"text": "By default, updated rows are not returned. To return it, chain the call\nwith `.select()` after filters.\n"
							},
							"typeParameter": [
								{
									"id": 88,
									"name": "Row",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								}
							],
							"parameters": [
								{
									"id": 89,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The values to update with\n"
									},
									"type": {
										"type": "reference",
										"id": 88,
										"name": "Row"
									}
								},
								{
									"id": 90,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters\n"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 91,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 92,
													"name": "count",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Count algorithm to use to count updated rows.\n\n`\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\nhood.\n\n`\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\nstatistics under the hood.\n\n`\"estimated\"`: Uses exact count for low numbers and planned count for high\nnumbers.\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestQueryBuilder.ts",
															"line": 275,
															"character": 3
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "exact"
															},
															{
																"type": "literal",
																"value": "planned"
															},
															{
																"type": "literal",
																"value": "estimated"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														92
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 40,
										"name": "Schema"
									},
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "Row"
										},
										"objectType": {
											"type": "reference",
											"id": 41,
											"name": "Relation"
										}
									},
									{
										"type": "literal",
										"value": null
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 77,
					"name": "upsert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestQueryBuilder.ts",
							"line": 201,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 78,
							"name": "upsert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform an UPSERT on the table or view. Depending on the column(s) passed\nto `onConflict`, `.upsert()` allows you to perform the equivalent of\n`.insert()` if a row with the corresponding `onConflict` columns doesn't\nexist, or if it does exist, perform an alternative action depending on\n`ignoreDuplicates`.",
								"text": "By default, upserted rows are not returned. To return it, chain the call\nwith `.select()`.\n"
							},
							"typeParameter": [
								{
									"id": 79,
									"name": "Row",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								}
							],
							"parameters": [
								{
									"id": 80,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The values to upsert with. Pass an object to upsert a\nsingle row or an array to upsert multiple rows.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 79,
												"name": "Row"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 79,
													"name": "Row"
												}
											}
										]
									}
								},
								{
									"id": 81,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters\n"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 82,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 85,
													"name": "count",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Count algorithm to use to count upserted rows.\n\n`\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\nhood.\n\n`\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\nstatistics under the hood.\n\n`\"estimated\"`: Uses exact count for low numbers and planned count for high\nnumbers.\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestQueryBuilder.ts",
															"line": 214,
															"character": 3
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "exact"
															},
															{
																"type": "literal",
																"value": "planned"
															},
															{
																"type": "literal",
																"value": "estimated"
															}
														]
													}
												},
												{
													"id": 84,
													"name": "ignoreDuplicates",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, duplicate rows are ignored. If\n`false`, duplicate rows are merged with existing rows.\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestQueryBuilder.ts",
															"line": 213,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 83,
													"name": "onConflict",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Comma-separated UNIQUE column(s) to specify how\nduplicate rows are determined. Two rows are duplicates if all the\n`onConflict` columns are equal.\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestQueryBuilder.ts",
															"line": 212,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														85,
														84,
														83
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 100,
								"typeArguments": [
									{
										"type": "reference",
										"id": 40,
										"name": "Schema"
									},
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "literal",
											"value": "Row"
										},
										"objectType": {
											"type": "reference",
											"id": 41,
											"name": "Relation"
										}
									},
									{
										"type": "literal",
										"value": null
									}
								],
								"name": "default"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						38
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						56,
						53,
						54,
						55,
						52
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						93,
						70,
						61,
						86,
						77
					]
				}
			],
			"sources": [
				{
					"fileName": "src/PostgrestQueryBuilder.ts",
					"line": 6,
					"character": 21
				}
			],
			"typeParameter": [
				{
					"id": 98,
					"name": "Schema",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "GenericSchema"
					}
				},
				{
					"id": 99,
					"name": "Relation",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "GenericTable"
							},
							{
								"type": "reference",
								"name": "GenericView"
							}
						]
					}
				}
			]
		},
		{
			"id": 391,
			"name": "PostgrestTransformBuilder",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 392,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 393,
							"name": "new PostgrestTransformBuilder",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 394,
									"name": "Schema",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GenericSchema"
									}
								},
								{
									"id": 395,
									"name": "Row",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								},
								{
									"id": 396,
									"name": "Result",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 397,
									"name": "builder",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 490,
										"typeArguments": [
											{
												"type": "reference",
												"id": 396,
												"name": "Result"
											}
										],
										"name": "default"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 391,
								"typeArguments": [
									{
										"type": "reference",
										"id": 394,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 395,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 396,
										"name": "Result"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 492,
								"name": "default.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 491,
						"name": "default.constructor"
					}
				},
				{
					"id": 472,
					"name": "allowEmpty",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 14,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 507,
						"name": "default.allowEmpty"
					}
				},
				{
					"id": 464,
					"name": "body",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 10,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 499,
						"name": "default.body"
					}
				},
				{
					"id": 467,
					"name": "fetch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 13,
							"character": 11
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 468,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 469,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 470,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "RequestInfo",
														"package": "typescript",
														"name": "RequestInfo"
													},
													{
														"type": "reference",
														"qualifiedName": "URL",
														"package": "typescript",
														"name": "URL"
													}
												]
											}
										},
										{
											"id": 471,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "RequestInit",
												"package": "typescript",
												"name": "RequestInit"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"qualifiedName": "Response",
												"package": "typescript",
												"name": "Response"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						}
					},
					"defaultValue": "fetch",
					"inheritedFrom": {
						"type": "reference",
						"id": 502,
						"name": "default.fetch"
					}
				},
				{
					"id": 462,
					"name": "headers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 8,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"qualifiedName": "Record",
						"package": "typescript",
						"name": "Record"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 497,
						"name": "default.headers"
					}
				},
				{
					"id": 460,
					"name": "method",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 6,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "GET"
							},
							{
								"type": "literal",
								"value": "HEAD"
							},
							{
								"type": "literal",
								"value": "POST"
							},
							{
								"type": "literal",
								"value": "PATCH"
							},
							{
								"type": "literal",
								"value": "DELETE"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 495,
						"name": "default.method"
					}
				},
				{
					"id": 463,
					"name": "schema",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 9,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 498,
						"name": "default.schema"
					}
				},
				{
					"id": 465,
					"name": "shouldThrowOnError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 11,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false",
					"inheritedFrom": {
						"type": "reference",
						"id": 500,
						"name": "default.shouldThrowOnError"
					}
				},
				{
					"id": 466,
					"name": "signal",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 12,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "AbortSignal",
						"package": "typescript",
						"name": "AbortSignal"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 501,
						"name": "default.signal"
					}
				},
				{
					"id": 461,
					"name": "url",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 7,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "URL",
						"package": "typescript",
						"name": "URL"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 496,
						"name": "default.url"
					}
				},
				{
					"id": 432,
					"name": "abortSignal",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 155,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 433,
							"name": "abortSignal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the AbortSignal for the fetch request."
							},
							"parameters": [
								{
									"id": 434,
									"name": "signal",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The AbortSignal to use for the fetch request\n"
									},
									"type": {
										"type": "reference",
										"qualifiedName": "AbortSignal",
										"package": "typescript",
										"name": "AbortSignal"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 391,
								"typeArguments": [
									{
										"type": "reference",
										"id": 394,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 395,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 396,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 441,
					"name": "csv",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 190,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 442,
							"name": "csv",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return `data` as a string in CSV format."
							},
							"type": {
								"type": "reference",
								"id": 490,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 445,
					"name": "explain",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 224,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 446,
							"name": "explain",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return `data` as the EXPLAIN plan for the query."
							},
							"parameters": [
								{
									"id": 447,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters\n"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 448,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 449,
													"name": "analyze",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, the query will be executed and the\nactual run time will be returned\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 232,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 452,
													"name": "buffers",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, include information on buffer usage\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 235,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 454,
													"name": "format",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "The format of the output, can be `\"text\"` (default)\nor `\"json\"`\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 237,
															"character": 2
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "text"
															},
															{
																"type": "literal",
																"value": "json"
															}
														]
													}
												},
												{
													"id": 451,
													"name": "settings",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, include information on configuration\nparameters that affect query planning\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 234,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 450,
													"name": "verbose",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, the query identifier will be returned\nand `data` will include the output columns of the query\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 233,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 453,
													"name": "wal",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, include information on WAL record generation\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 236,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														449,
														452,
														454,
														451,
														450,
														453
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 490,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									{
										"type": "reference",
										"id": 490,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "unknown"
														}
													],
													"qualifiedName": "Record",
													"package": "typescript",
													"name": "Record"
												}
											}
										],
										"name": "default"
									}
								]
							}
						}
					]
				},
				{
					"id": 443,
					"name": "geojson",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 198,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 444,
							"name": "geojson",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return `data` as an object in [GeoJSON](https://geojson.org) format."
							},
							"type": {
								"type": "reference",
								"id": 490,
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"qualifiedName": "Record",
										"package": "typescript",
										"name": "Record"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 419,
					"name": "limit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 119,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 420,
							"name": "limit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Limit the query result by `count`."
							},
							"parameters": [
								{
									"id": 421,
									"name": "count",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The maximum number of rows to return"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 422,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 423,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 424,
													"name": "foreignTable",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Set this to limit rows of foreign tables\ninstead of the current table\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 119,
															"character": 42
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														424
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 391,
								"typeArguments": [
									{
										"type": "reference",
										"id": 394,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 395,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 396,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 438,
					"name": "maybeSingle",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 179,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 439,
							"name": "maybeSingle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return `data` as a single object instead of an array of objects.",
								"text": "Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\nthis returns an error.\n"
							},
							"typeParameter": [
								{
									"id": 440,
									"name": "ResultOne",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 396,
											"name": "Result"
										},
										"extendsType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"name": "ResultOne"
											}
										},
										"trueType": {
											"type": "reference",
											"name": "ResultOne"
										},
										"falseType": {
											"type": "intrinsic",
											"name": "never"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 490,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"id": 341,
												"name": "ResultOne"
											}
										]
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 403,
					"name": "order",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 49,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 404,
							"name": "order",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Order the query result by `column`.",
								"text": "You can call this method multiple times to order by multiple columns.\n\nYou can order foreign tables, but it doesn't affect the ordering of the\ncurrent table.\n"
							},
							"typeParameter": [
								{
									"id": 405,
									"name": "ColumnName",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"parameters": [
								{
									"id": 406,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to order by"
									},
									"type": {
										"type": "reference",
										"id": 306,
										"name": "ColumnName"
									}
								},
								{
									"id": 407,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Named parameters"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 408,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 409,
													"name": "ascending",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, the result will be in ascending order"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 52,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 411,
													"name": "foreignTable",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Set this to order a foreign table by foreign\ncolumns\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 54,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "undefined"
													}
												},
												{
													"id": 410,
													"name": "nullsFirst",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, `null`s appear first. If `false`,\n`null`s appear last."
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 53,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														409,
														411,
														410
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 391,
								"typeArguments": [
									{
										"type": "reference",
										"id": 394,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 395,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 396,
										"name": "Result"
									}
								],
								"name": "default"
							}
						},
						{
							"id": 412,
							"name": "order",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Order the query result by `column`.",
								"text": "You can call this method multiple times to order by multiple columns.\n\nYou can order foreign tables, but it doesn't affect the ordering of the\ncurrent table.\n"
							},
							"parameters": [
								{
									"id": 413,
									"name": "column",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The column to order by"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 414,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Named parameters"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 415,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 416,
													"name": "ascending",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, the result will be in ascending order"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 60,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 418,
													"name": "foreignTable",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Set this to order a foreign table by foreign\ncolumns\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 62,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 417,
													"name": "nullsFirst",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "If `true`, `null`s appear first. If `false`,\n`null`s appear last."
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 61,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														416,
														418,
														417
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 391,
								"typeArguments": [
									{
										"type": "reference",
										"id": 394,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 395,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 396,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 425,
					"name": "range",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 135,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 426,
							"name": "range",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Limit the query result by `from` and `to` inclusively."
							},
							"parameters": [
								{
									"id": 427,
									"name": "from",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The starting index from which to limit the result"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 428,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The last index to which to limit the result"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 429,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Named parameters"
									},
									"originalName": "__namedParameters",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 430,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 431,
													"name": "foreignTable",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Set this to limit rows of foreign tables\ninstead of the current table\n"
													},
													"sources": [
														{
															"fileName": "src/PostgrestTransformBuilder.ts",
															"line": 138,
															"character": 22
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														431
													]
												}
											]
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"id": 391,
								"typeArguments": [
									{
										"type": "reference",
										"id": 394,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 395,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 396,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 457,
					"name": "returns",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 279,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 458,
							"name": "returns",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Override the type of the returned `data`."
							},
							"typeParameter": [
								{
									"id": 459,
									"name": "NewResult",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The new result type to override with\n"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 391,
								"typeArguments": [
									{
										"type": "reference",
										"id": 394,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 395,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 360,
										"name": "NewResult"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 455,
					"name": "rollback",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 265,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 456,
							"name": "rollback",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rollback the query.",
								"text": "`data` will still be returned, but the query is not committed.\n"
							},
							"type": {
								"type": "reference",
								"id": 391,
								"typeArguments": [
									{
										"type": "reference",
										"id": 394,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 395,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 396,
										"name": "Result"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 398,
					"name": "select",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 19,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 399,
							"name": "select",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform a SELECT on the query result.",
								"text": "By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\nreturn modified rows. By calling this method, modified rows are returned in\n`data`.\n"
							},
							"typeParameter": [
								{
									"id": 400,
									"name": "Query",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"default": {
										"type": "literal",
										"value": "*"
									}
								},
								{
									"id": 401,
									"name": "NewResultOne",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 394,
												"name": "Schema"
											},
											{
												"type": "reference",
												"id": 395,
												"name": "Row"
											},
											{
												"type": "reference",
												"id": 301,
												"name": "Query"
											}
										],
										"name": "GetResult"
									}
								}
							],
							"parameters": [
								{
									"id": 402,
									"name": "columns",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The columns to retrieve, separated by commas\n"
									},
									"type": {
										"type": "reference",
										"id": 301,
										"name": "Query"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 391,
								"typeArguments": [
									{
										"type": "reference",
										"id": 394,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 395,
										"name": "Row"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 302,
											"name": "NewResultOne"
										}
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 435,
					"name": "single",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestTransformBuilder.ts",
							"line": 166,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 436,
							"name": "single",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Return `data` as a single object instead of an array of objects.",
								"text": "Query result must be one row (e.g. using `.limit(1)`), otherwise this\nreturns an error.\n"
							},
							"typeParameter": [
								{
									"id": 437,
									"name": "ResultOne",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 396,
											"name": "Result"
										},
										"extendsType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"name": "ResultOne"
											}
										},
										"trueType": {
											"type": "reference",
											"name": "ResultOne"
										},
										"falseType": {
											"type": "intrinsic",
											"name": "never"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 490,
								"typeArguments": [
									{
										"type": "reference",
										"id": 338,
										"name": "ResultOne"
									}
								],
								"name": "default"
							}
						}
					]
				},
				{
					"id": 475,
					"name": "then",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 38,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 476,
							"name": "then",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 477,
									"name": "TResult1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "reference",
										"id": 538,
										"typeArguments": [
											{
												"type": "reference",
												"id": 396,
												"name": "Result"
											}
										],
										"name": "PostgrestSingleResponse"
									}
								},
								{
									"id": 478,
									"name": "TResult2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"default": {
										"type": "intrinsic",
										"name": "never"
									}
								}
							],
							"parameters": [
								{
									"id": 479,
									"name": "onfulfilled",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 480,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 481,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 482,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 538,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 396,
																				"name": "Result"
																			}
																		],
																		"name": "PostgrestSingleResponse"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 378,
																		"name": "TResult1"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 378,
																				"name": "TResult1"
																			}
																		],
																		"qualifiedName": "PromiseLike",
																		"package": "typescript",
																		"name": "PromiseLike"
																	}
																]
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 483,
									"name": "onrejected",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 484,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 485,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 486,
																	"name": "reason",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 379,
																		"name": "TResult2"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 379,
																				"name": "TResult2"
																			}
																		],
																		"qualifiedName": "PromiseLike",
																		"package": "typescript",
																		"name": "PromiseLike"
																	}
																]
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 378,
												"name": "TResult1"
											},
											{
												"type": "reference",
												"id": 379,
												"name": "TResult2"
											}
										]
									}
								],
								"qualifiedName": "PromiseLike",
								"package": "typescript",
								"name": "PromiseLike"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 511,
								"name": "default.then"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 510,
						"name": "default.then"
					}
				},
				{
					"id": 473,
					"name": "throwOnError",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/PostgrestBuilder.ts",
							"line": 33,
							"character": 1
						}
					],
					"signatures": [
						{
							"id": 474,
							"name": "throwOnError",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If there's an error with the query, throwOnError will reject the promise by\nthrowing the error instead of returning it as part of a successful response.",
								"text": "{@link https://github.com/supabase/supabase-js/issues/92}\n"
							},
							"type": {
								"type": "reference",
								"id": 391,
								"typeArguments": [
									{
										"type": "reference",
										"id": 394,
										"name": "Schema"
									},
									{
										"type": "reference",
										"id": 395,
										"name": "Row"
									},
									{
										"type": "reference",
										"id": 396,
										"name": "Result"
									}
								],
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 509,
								"name": "default.throwOnError"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 508,
						"name": "default.throwOnError"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						392
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						472,
						464,
						467,
						462,
						460,
						463,
						465,
						466,
						461
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						432,
						441,
						445,
						443,
						419,
						438,
						403,
						425,
						457,
						455,
						398,
						435,
						475,
						473
					]
				}
			],
			"sources": [
				{
					"fileName": "src/PostgrestTransformBuilder.ts",
					"line": 5,
					"character": 21
				}
			],
			"typeParameter": [
				{
					"id": 487,
					"name": "Schema",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "GenericSchema"
					}
				},
				{
					"id": 488,
					"name": "Row",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"qualifiedName": "Record",
						"package": "typescript",
						"name": "Record"
					}
				},
				{
					"id": 489,
					"name": "Result",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 490,
					"typeArguments": [
						{
							"type": "reference",
							"id": 396,
							"name": "Result"
						}
					],
					"name": "default"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 100,
					"name": "PostgrestFilterBuilder"
				}
			]
		},
		{
			"id": 525,
			"name": "PostgrestResponseFailure",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 528,
					"name": "count",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 32,
							"character": 1
						}
					],
					"type": {
						"type": "literal",
						"value": null
					}
				},
				{
					"id": 527,
					"name": "data",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 31,
							"character": 1
						}
					],
					"type": {
						"type": "literal",
						"value": null
					}
				},
				{
					"id": 526,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 30,
							"character": 1
						}
					],
					"type": {
						"type": "reference",
						"id": 542,
						"name": "PostgrestError"
					}
				},
				{
					"id": 529,
					"name": "status",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 21,
							"character": 1
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PostgrestResponseBase.status"
					}
				},
				{
					"id": 530,
					"name": "statusText",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 22,
							"character": 1
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PostgrestResponseBase.statusText"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						528,
						527,
						526,
						529,
						530
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 29,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "PostgrestResponseBase"
				}
			]
		},
		{
			"id": 531,
			"name": "PostgrestResponseSuccess",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 534,
					"name": "count",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 27,
							"character": 1
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 533,
					"name": "data",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 26,
							"character": 1
						}
					],
					"type": {
						"type": "reference",
						"id": 537,
						"name": "T"
					}
				},
				{
					"id": 532,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 25,
							"character": 1
						}
					],
					"type": {
						"type": "literal",
						"value": null
					}
				},
				{
					"id": 535,
					"name": "status",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 21,
							"character": 1
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PostgrestResponseBase.status"
					}
				},
				{
					"id": 536,
					"name": "statusText",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 22,
							"character": 1
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "PostgrestResponseBase.statusText"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						534,
						533,
						532,
						535,
						536
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 24,
					"character": 17
				}
			],
			"typeParameter": [
				{
					"id": 537,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "PostgrestResponseBase"
				}
			]
		},
		{
			"id": 542,
			"name": "PostgrestError",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Error format",
				"text": "{@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}\n"
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 8,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 543,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 547,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types.ts",
									"line": 12,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 545,
							"name": "details",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types.ts",
									"line": 10,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 546,
							"name": "hint",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types.ts",
									"line": 11,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 544,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types.ts",
									"line": 9,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								547,
								545,
								546,
								544
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 8,
							"character": 29
						}
					]
				}
			}
		},
		{
			"id": 540,
			"name": "PostgrestMaybeSingleResponse",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 41,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 541,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"type": {
				"type": "reference",
				"id": 538,
				"typeArguments": [
					{
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 541,
								"name": "T"
							},
							{
								"type": "literal",
								"value": null
							}
						]
					}
				],
				"name": "PostgrestSingleResponse"
			}
		},
		{
			"id": 523,
			"name": "PostgrestResponse",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 42,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 524,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"type": {
				"type": "reference",
				"id": 538,
				"typeArguments": [
					{
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 524,
							"name": "T"
						}
					}
				],
				"name": "PostgrestSingleResponse"
			}
		},
		{
			"id": 538,
			"name": "PostgrestSingleResponse",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 38,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 539,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"id": 531,
						"typeArguments": [
							{
								"type": "reference",
								"id": 539,
								"name": "T"
							}
						],
						"name": "PostgrestResponseSuccess"
					},
					{
						"type": "reference",
						"id": 525,
						"name": "PostgrestResponseFailure"
					}
				]
			}
		}
	],
	"groups": [
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				490,
				1,
				100,
				37,
				391
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				525,
				531
			]
		},
		{
			"title": "Type Aliases",
			"kind": 4194304,
			"children": [
				542,
				540,
				523,
				538
			]
		}
	],
	"sources": [
		{
			"fileName": "src/index.ts",
			"line": 1,
			"character": 0
		}
	]
}